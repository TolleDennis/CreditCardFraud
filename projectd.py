# -*- coding: utf-8 -*-
"""ProjectD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19mWNmJqE76bWd4UlTATiPLn4g5mJT4gQ
"""

!cat /proc/meminfo

import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

#loading the dataset into pandas dataframe
credit_card=pd.read_csv('creditcard.csv')
credit_card

credit_card.describe()

credit_card.info()

#checking of missing values from every column
credit_card.isnull().sum()

credit_card['Class'].value_counts()

credit_card['V25'].value_counts()

credit_card['V22'].isnull()

credit_card[credit_card['V22'].isnull()]

credit_card.drop([45645],inplace=True)

credit_card.isnull().sum()

#number of legit transation and fraudent transaction
credit_card['Class'].value_counts()

#separating data for analysis
legitTransaction = credit_card[credit_card['Class']==0]
fradTransaction = credit_card[credit_card['Class']==1]

legitTransaction

fradTransaction

legitTransaction.count()

fradTransaction.count()

#statistical measures of data
legitTransaction['Amount'].describe()

fradTransaction['Amount'].describe()

credit_card.groupby('Class').mean()

#Sample dataset containing similar distribution of legit transacton and the fraudent
#legit transactions are 63306
#fradulent transactions 165

legitTransactionSample=legitTransaction.sample(n=142)

#Concat two dataframes
new_CreditCard=pd.concat([legitTransactionSample,fradTransaction],axis=0)

new_CreditCard

new_CreditCard['Class'].value_counts()

new_CreditCard.groupby('Class').mean()

#Splitting the data into Features and targets
X=new_CreditCard.drop(columns=['Class'],axis=1)
Y=new_CreditCard['Class']

print(X)

print(Y)

#Split the data into training data ana testing data
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=4)

print(X_train)

print(X_test)

print(Y_train)

print(Y_test)

#Modelling Training with Logistic Regression Model
model = LogisticRegression(C=1e5)

#Training the logistic regression model with training data
model.fit(X_train,Y_train)

#Model Evaluation with Accuracy Score
#accuracy on training data
X_train_prediction = np.array(model.predict(X_train))
training_data_accuracy =np.array(accuracy_score(X_train_prediction,Y_train))

print('Our training data accuracy model score is: ',training_data_accuracy)

#accuracy on the test data
X_test_prediction = np.array(model.predict(X_test))
test_data_accuracy =np.array(accuracy_score(X_test_prediction,Y_test))

print('Our test data accuracy model score is: ',test_data_accuracy)

print(confusion_matrix(X_test_prediction,Y_test))

print(classification_report(X_test_prediction,Y_test))

